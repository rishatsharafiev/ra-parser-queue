version: "3.5"
networks:
  backend:
    driver: ${NETWORKS_DRIVER}
    # driver_opts:
    #   encrypted: "1"
volumes:
  postgres:
    driver: ${VOLUMES_DRIVER}
  portainer:
    driver: ${VOLUMES_DRIVER}
  rds:
    driver: ${VOLUMES_DRIVER}
  proxy:
    driver: ${VOLUMES_DRIVER}
services:
  hub:
    image: selenium/hub:3.12.0-boron
    environment:
      - DBUS_SESSION_BUS_ADDRESS=/dev/null
      - GRID_NEW_SESSION_WAIT_TIMEOUT=-1
      - GRID_THROW_ON_CAPABILITY_NOT_PRESENT=true
      - GRID_JETTY_MAX_THREADS=-1
      - GRID_CLEAN_UP_CYCLE=5000
      - GRID_BROWSER_TIMEOUT=0
      - GRID_TIMEOUT=0
      - GRID_DEBUG=false
      - GRID_MAX_SESSION=100
      # - JAVA_OPTS=-Xmx1024m
    entrypoint: bash -c 'SE_OPTS="-timeout 86400 -browserTimeout 86400" /opt/bin/entry_point.sh'
    ports:
      - "${SELENIUM_HUB_PORT}:4444"
    networks:
      - backend
    volumes:
      - /dev/shm:/dev/shm
  chrome:
    image: selenium/node-chrome:3.12.0-boron
    environment:
      # - SCREEN_WIDTH=600
      # - SCREEN_HEIGHT=480
      - HUB_PORT_4444_TCP_ADDR=hub
      - HUB_PORT_4444_TCP_PORT=${SELENIUM_HUB_PORT}
      - NODE_MAX_INSTANCES=${SELENIUM_NODE_MAX_INSTANCES}
      - NODE_MAX_SESSION=${SELENIUM_NODE_MAX_SESSION}
      # - JAVA_OPTS=-Xmx250m
      # - LOGSPOUT=ignore
      # - DBUS_SESSION_BUS_ADDRESS=/dev/null
    entrypoint: bash -c 'SE_OPTS="-timeout 86400 -browserTimeout 86400 -host $$HOSTNAME -port 5556" /opt/bin/entry_point.sh'
    ports:
      - "5556"
      - "9222"
    networks:
      - backend
    volumes:
      - /dev/shm:/dev/shm
    depends_on:
      - hub
  rds:
    build:
      context: ./rds
    volumes:
      - rds:/var/log
      - ${RDS_APP_PATH}:/app
    ports:
      - "${RDS_SUPERUSER_PORT}:9001"
    environment:
      - SELENIUM_HUB_URL=${SELENIUM_HUB_URL}
      - SELENIUM_NODE_MAX_CONTAINERS=${SELENIUM_NODE_MAX_CONTAINERS}
      - SELENIUM_NODE_MAX_INSTANCES=${SELENIUM_NODE_MAX_INSTANCES}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - RDS_LOG_PATH=${RDS_LOG_PATH}
      - RDS_APP_PATH=${RDS_APP_PATH}
      - RDS_MAX_PAGE=${RDS_MAX_PAGE}
      - RDS_LINK_PER_PAGE=${RDS_LINK_PER_PAGE}
    networks:
      - backend
    depends_on:
      - postgres
  proxy:
    build:
      context: ./proxy
    volumes:
      - proxy:/var/log
    ports:
      - "${PROXY_SUPERUSER_PORT}:9001"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - backend
    depends_on:
      - postgres
  postgres:
    image: postgres:9.6-alpine
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
  adminer:
    image: adminer
    ports:
      - ${ADMINER_PORT}:8080
    depends_on:
      - postgres
    networks:
      - backend
  portainer:
    image: portainer/portainer:latest
    ports:
      - "${PORTAINER_PORT}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    networks:
      - backend
  cadvisor:
    image: google/cadvisor:latest
    ports:
      - "${CADVISOR_PORT}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - backend
